package com.example.renan.verificador;

import android.Manifest;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.CountDownTimer;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.os.PersistableBundle;
import android.provider.MediaStore;
import android.provider.SyncStateContract;
import android.support.v4.app.ActivityCompat;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.example.renan.verificador.ui.CameraSourcePreview;
import com.example.renan.verificador.ui.GraphicOverlay;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GoogleApiAvailability;
import com.google.android.gms.vision.CameraSource;
import com.google.android.gms.vision.MultiProcessor;
import com.google.android.gms.vision.Tracker;
import com.google.android.gms.vision.face.Face;
import com.google.android.gms.vision.face.FaceDetector;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.UUID;

public class CameraActivity extends AppCompatActivity {

    private static final String TAG = "FaceTracker";
    //Manda frames para o detector
    private CameraSource mCameraSource = null;

    private CameraSourcePreview mPreview;
    private GraphicOverlay mGraphicOverlay;

    private static final int RC_HANDLE_GMS = 9001;
    // permission request codes need to be < 256
    private static final int RC_HANDLE_CAMERA_PERM = 2;

    private boolean IdIsSet = false;

    private int mFaceId = -1;

    private int onResumCount = -2;


    ImageView imagem1;
    ImageView imagem2;
    Bitmap mBitmap0;
    Bitmap mBitmap1;
    TextView txtView;
    String myLocalFilePath1;
    String myLocalFilePath2;
    UUID mFaceId0;
    UUID mFaceId1;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_camera);
        mPreview = (CameraSourcePreview) findViewById(R.id.preview);
        mGraphicOverlay = (GraphicOverlay) findViewById(R.id.faceOverlay);
        //checando a chegada de dados da activity

        Bundle extras = getIntent().getExtras();
        idDeViews = extras.getInt("idDeViews");
        /*if(idDeViews==R.id.btTirarFoto1 && extras.getBoolean("imagePathIsThere")==true){
            myLocalFilePath2 = extras.getString("path");
            mFaceId1 = (UUID) extras.get("faceId1");
        }
        else if(idDeViews==R.id.bttirarFoto2 && extras.getBoolean("imagePathIsThere")==true){
            myLocalFilePath1 = extras.getString("path");
            mFaceId0 = (UUID)extras.get("faceId0");
        }*/

        // Check for the camera permission before accessing the camera.  If the
        // permission is not granted yet, request permission.
        int rc = ActivityCompat.checkSelfPermission(this, Manifest.permission.CAMERA);
        if (rc == PackageManager.PERMISSION_GRANTED) {
            createCameraSource();
        } else {
            requestCameraPermission();
        }


    }

    private void requestCameraPermission() {
        Log.w(TAG, "Camera permission is not granted. Requesting permission");

        final String[] permissions = new String[]{Manifest.permission.CAMERA};

        if (!ActivityCompat.shouldShowRequestPermissionRationale(this,
                Manifest.permission.CAMERA)) {
            ActivityCompat.requestPermissions(this, permissions, RC_HANDLE_CAMERA_PERM);
            return;
        }

        final Activity thisActivity = this;

        View.OnClickListener listener = new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                ActivityCompat.requestPermissions(thisActivity, permissions,
                        RC_HANDLE_CAMERA_PERM);
            }
        };



    }

    private void createCameraSource() {

        Context context = getApplicationContext();
        FaceDetector detector = new FaceDetector.Builder(context)
                .setClassificationType(FaceDetector.ALL_CLASSIFICATIONS)
                .build();

        detector.setProcessor(
                new MultiProcessor.Builder<>(new GraphicFaceTrackerFactory())
                        .build());

        if (!detector.isOperational()) {

            Log.w(TAG, "Dependências do Face detector não estão disponíveis ainda.");
        }

        mCameraSource = new CameraSource.Builder(context, detector)
                .setRequestedPreviewSize(640, 480)
                .setFacing(CameraSource.CAMERA_FACING_FRONT)
                .setRequestedFps(10.0f)
                .build();

    }

    @Override
    protected void onResume() {
        super.onResume();
        startCameraSource();
    }

    @Override
    protected void onPause() {
        super.onPause();
        mPreview.stop();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (mCameraSource != null) {
            mCameraSource.release();
        }
    }

    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        if (requestCode != RC_HANDLE_CAMERA_PERM) {
            Log.d(TAG, "Got unexpected permission result: " + requestCode);
            super.onRequestPermissionsResult(requestCode, permissions, grantResults);
            return;
        }

        if (grantResults.length != 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
            Log.d(TAG, "Camera permission granted - initialize the camera source");
            // we have permission, so create the camerasource
            createCameraSource();
            return;
        }

        Log.e(TAG, "Permission not granted: results len = " + grantResults.length +
                " Result code = " + (grantResults.length > 0 ? grantResults[0] : "(empty)"));

        DialogInterface.OnClickListener listener = new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int id) {
                finish();
            }
        };

        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Face Tracker sample")
                .setMessage(R.string.no_camera_permission)
                .setPositiveButton(R.string.ok, listener)
                .show();
    }

    private void startCameraSource() {

        // check that the device has play services available.
        int code = GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(
                getApplicationContext());
        if (code != ConnectionResult.SUCCESS) {
            Dialog dlg =
                    GoogleApiAvailability.getInstance().getErrorDialog(this, code, RC_HANDLE_GMS);
            dlg.show();
        }

        if (mCameraSource != null) {
            try {
                mPreview.start(mCameraSource, mGraphicOverlay);
            } catch (IOException e) {
                Log.e(TAG, "Unable to start camera source.", e);
                mCameraSource.release();
                mCameraSource = null;
            }
        }
    }
    private class GraphicFaceTrackerFactory implements MultiProcessor.Factory<Face> {
        @Override
        public Tracker<Face> create(Face face) {
            return new GraphicFaceTracker(mGraphicOverlay);
        }
    }

    private class GraphicFaceTracker extends Tracker<Face> {
        private GraphicOverlay mOverlay;
        private FaceGraphic mFaceGraphic;

        GraphicFaceTracker(GraphicOverlay overlay) {
            mOverlay = overlay;
            mFaceGraphic = new FaceGraphic(overlay);
        }

        /**
         * Start tracking the detected face instance within the face overlay.
         */
        @Override
        public void onNewItem(int faceId, Face item) {
            Log.i("FaceId", String.valueOf(faceId) + "Value IdisSet: " + String.valueOf(IdIsSet));
            mFaceGraphic.setId(faceId);
        }

        /**
         * Update the position/characteristics of the face within the overlay.
         */
        @Override
        public void onUpdate(FaceDetector.Detections<Face> detectionResults, Face face) {
            mOverlay.add(mFaceGraphic);
            mFaceGraphic.updateFace(face);
        }

        /**
         * Hide the graphic when the corresponding face was not detected.  This can happen for
         * intermediate frames temporarily (e.g., if the face was momentarily blocked from
         * view).
         */
        @Override
        public void onMissing(FaceDetector.Detections<Face> detectionResults) {
            mOverlay.remove(mFaceGraphic);
        }

        /**
         * Chamado quando a face nao está mais presente. Remove o gráfico
         ** the overlay.
         */
        @Override
        public void onDone() {
            mOverlay.remove(mFaceGraphic);

        }
    }
    private String myLocalFilePath;
    private int idDeViews;

    private CameraSource.PictureCallback pictureCallback = new CameraSource.PictureCallback() {

        @Override
        public void onPictureTaken(byte[] bytes) {
           myLocalFilePath = getExternalFilesDir(null)+"/"+System.currentTimeMillis()+".jpeg";
            File pictureFileDir = new File(myLocalFilePath);
            if(!pictureFileDir.getParentFile().exists()){
                pictureFileDir.getParentFile().mkdir();
            }
            try {
                FileOutputStream fos = new FileOutputStream(pictureFileDir);
                fos.write(bytes);
                fos.close();

            } catch (IOException error) {

            }

            Intent intentBackToMainActivity = new Intent(CameraActivity.this, MainActivity.class);
            intentBackToMainActivity.putExtra("idDeViews",idDeViews);
            intentBackToMainActivity.putExtra("path", myLocalFilePath);
            startActivity(intentBackToMainActivity);
            finish();



            /*if(idDeViews==R.id.btTirarFoto1){
                if(myLocalFilePath2!=null){//Se tiver conteúdo
                    //caso a foto dois tenha sido tirada primeiro
                    Intent intentBackToMainActivity = new Intent(CameraActivity.this, MainActivity.class);
                    intentBackToMainActivity.putExtra("path1", myLocalFilePath);
                    intentBackToMainActivity.putExtra("path2",myLocalFilePath2);
                    intentBackToMainActivity.putExtra("idDeViews",idDeViews);
                    intentBackToMainActivity.putExtra("faceId1",mFaceId1);
                    startActivity(intentBackToMainActivity);
                    finish();
                }
                else{
                    Intent intentBackToMainActivity = new Intent(CameraActivity.this, MainActivity.class);
                    intentBackToMainActivity.putExtra("path1", myLocalFilePath);
                    intentBackToMainActivity.putExtra("path2", myLocalFilePath2);
                    intentBackToMainActivity.putExtra("idDeViews",idDeViews);
                    startActivity(intentBackToMainActivity);
                    finish();
                }
            }

            if(idDeViews==R.id.bttirarFoto2){
                if(myLocalFilePath1!=null){
                    Intent intentBackToMainActivity = new Intent(CameraActivity.this, MainActivity.class);
                    intentBackToMainActivity.putExtra("path1", myLocalFilePath1);
                    intentBackToMainActivity.putExtra("path2",myLocalFilePath);
                    intentBackToMainActivity.putExtra("idDeViews",idDeViews);
                    intentBackToMainActivity.putExtra("faceId0",mFaceId0);
                    startActivity(intentBackToMainActivity);
                    finish();
                }else{
                    Intent intentBackToMainActivity = new Intent(CameraActivity.this, MainActivity.class);
                    intentBackToMainActivity.putExtra("path2", myLocalFilePath);
                    intentBackToMainActivity.putExtra("path1", myLocalFilePath1);
                    intentBackToMainActivity.putExtra("idDeViews",idDeViews);
                    startActivity(intentBackToMainActivity);
                    finish();
                }
            }*/
        }
    };


    public void tirarFoto(View view){
        mCameraSource.takePicture(null,pictureCallback);
    }
}
